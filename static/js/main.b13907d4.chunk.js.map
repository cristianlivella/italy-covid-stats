{"version":3,"sources":["components/ItalyMap.tsx","components/InfoBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","rossa","arancione","gialla","bianca","error","Container","styled","div","StyledMap","ComposableMap","ItalyMap","props","regionColors","setTooltipContent","data-tip","projection","projectionConfig","rotate","scale","geography","geojson","geographies","map","geo","regionInfo","find","region","name","properties","reg_name","color","fill","stroke","strokeWidth","onClick","console","log","onMouseEnter","onMouseLeave","style","default","outline","hover","cursor","opacity","pressed","rsmKey","Title","Value","size","Label","FlexContainer","FlexChild","InfoBox","label","newCases","recovered","deaths","day","App","useState","selectedRegion","selectRegion","setRegionColors","nationalData","setNationalData","regionalData","setRegionalData","infoBoxData","setInfoBoxData","updateData","useCallback","updateRegionColors","updateSpreadData","fetch","then","res","json","newRegionColors","forEach","push","Object","entries","sort","a","b","data","useEffect","setInterval","length","todayData","pop","yesterdayData","nuovi_positivi","dimessi_guariti","deceduti","Date","parse","toLocaleDateString","year","month","selectedRegionData","filter","thisData","denominazione_regione","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b13907d4.chunk.js","sourcesContent":["import { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport styled from 'styled-components';\nimport { Region } from '../types';\nimport geojson from '../geojson/regions_italy.json';\n\nconst colors = { rossa: '#dd222a', arancione: '#e78314', gialla: '#f8c300', bianca: '#f7f7f7', error: '#000000' }\n\ninterface Props {\n    regionColors: Region[],\n    setTooltipContent: (content: string) => void\n}\n\nconst ItalyMap = (props: Props) => {\n    const { regionColors, setTooltipContent } = props;\n    return (\n        <Container data-tip=''>\n            <StyledMap\n                projection='geoAzimuthalEqualArea'\n                projectionConfig={{\n                    rotate: [-12.0, -41.9, 0],\n                    scale: 3250\n                }}\n            >\n            {/* geojson source: https://github.com/openpolis/geojson-italy */}\n                <Geographies geography={geojson}>\n                    {\n                        ({ geographies }) => geographies.map((geo) => {\n                            const regionInfo = regionColors.find((region: Region) => {\n                                return region.name === geo.properties.reg_name;\n                            });\n                            const color = regionInfo ? regionInfo['color'] : 'error';\n                            return (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    fill={colors[color]}\n                                    stroke={'#555555'}\n                                    strokeWidth={0.5}\n                                    onClick = {() => {\n                                        const { reg_name } = geo.properties;\n                                        console.log('todo; you clicked on ' + reg_name);\n                                    }}\n                                    onMouseEnter={() => {\n                                        const { reg_name } = geo.properties;\n                                        setTooltipContent(reg_name);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltipContent('');\n                                    }}\n                                    style={{\n                                        default: {\n                                            outline: 'none'\n                                        },\n                                        hover: {\n                                            cursor: 'pointer',\n                                            outline: 'none',\n                                            opacity: 0.90\n                                        },\n                                        pressed: {\n                                            cursor: 'pointer',\n                                            outline: 'none',\n                                            opacity: 0.85\n                                        }\n                                    }}\n                                />\n                            );\n                        })\n                    }\n                </Geographies>\n            </StyledMap>\n        </Container>\n    );\n}\n\nconst Container = styled.div`\n    height: 100%;\n    width: 100%;\n`\n\nconst StyledMap = styled(ComposableMap)`\n    height: 100%;\n    width: 100%;\n`\n\nexport default ItalyMap;\n","import styled from 'styled-components';\n\ninterface Props {\n    label: string\n    newCases: number\n    recovered: number\n    deaths: number\n    day: string\n}\n\nconst InfoBox = (props: Props) => {\n    const { label, newCases, recovered, deaths, day } = props;\n    return (\n        <Container>\n            <Title>{label}</Title>\n            <Value size='big'>{newCases}</Value>\n            <Label size='big'>nuovi casi</Label>\n            <FlexContainer>\n                <FlexChild>\n                    <Value>{recovered}</Value>\n                    <Label>guariti</Label>\n                </FlexChild>\n                <FlexChild>\n                    <Value>{deaths}</Value>\n                    <Label>decessi</Label>\n                </FlexChild>\n            </FlexContainer>\n            <Label size='small'>{day}</Label>\n        </Container>\n    );\n}\n\nconst Container = styled.div`\n    position: absolute;\n    width: 400px;\n    top: 16px;\n    right: 16px;\n    background-color: #fcfcfc;\n    padding: 16px;\n    box-shadow: rgba(0, 0, 0, 0.90) 0px 1px 2px, rgba(0, 0, 0, 0.90) 0px 2px 4px, rgba(0, 0, 0, 0.90) 0px 4px 8px, rgba(0, 0, 0, 0.90) 0px 8px 16px, rgba(0, 0, 0, 0.90) 0px 16px 32px, rgba(0, 0, 0, 0.90) 0px 32px 64px;\n`\n\nconst Title = styled.div`\n    font-size: 28pt;\n    margin-bottom: 8px;\n    font-weight: bold;\n`\n\nconst Value = styled.div<{ size ?: string}>`\n    font-size: ${({ size }) => {\n        if (size === 'small') {\n            return '12pt';\n        }\n        else if (size === 'big') {\n            return '40pt';\n        }\n        return '32pt';\n    }};\n    letter-spacing: 4pt;\n`\n\nconst Label = styled.div<{ size ?: string}>`\n    font-size: ${({ size }) => {\n        if (size === 'small') {\n            return '14pt';\n        }\n        else if (size === 'big') {\n            return '22pt';\n        }\n        return '16pt';\n    }};\n`\n\nconst FlexContainer = styled.div`\n    display: flex;\n    margin: 16px 0;\n`\n\nconst FlexChild = styled.div`\n    flex: 1 1 100%\n`\n\nexport default InfoBox;\n","import { useState, useEffect, useCallback } from 'react';\nimport ItalyMap from './components/ItalyMap';\nimport InfoBox from './components/InfoBox';\nimport ReactTooltip from 'react-tooltip';\nimport './App.css';\nimport { Region, NationalData, RegionalData } from './types';\n\nconst App = () => {\n    const [selectedRegion, selectRegion] = useState('');\n    const [regionColors, setRegionColors] = useState<Region[]>([]);\n    const [nationalData, setNationalData] = useState<NationalData[] | null>();\n    const [regionalData, setRegionalData] = useState<RegionalData[] | null>();\n    const [infoBoxData, setInfoBoxData] = useState({\n        label: 'Italia',\n        newCases: 0,\n        recovered: 0,\n        deaths: 0,\n        day: ''\n    });\n\n    const updateData = useCallback(() => {\n        updateRegionColors();\n        updateSpreadData();\n    }, []);\n\n    const updateRegionColors = () => {\n        // data source: https://www.salute.gov.it/portale/nuovocoronavirus/homeNuovoCoronavirus.jsp\n        fetch('https://cristianlivella.com/covid19-colori-regioni/')\n            .then(res => res.json())\n            .then(res => {\n                const newRegionColors : Region[]  = [];\n                for (const [color, regions] of Object.entries(res)) {\n                    const regionsList = regions as string[]\n                    regionsList.forEach((region) => {\n                        newRegionColors.push({\n                            name: region,\n                            color: color as Region['color']\n                        })\n                    })\n                }\n                setRegionColors(newRegionColors);\n            })\n    }\n\n    const updateSpreadData = () => {\n        fetch('https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-andamento-nazionale.json')\n            .then(res => res.json())\n            .then((res : NationalData[]) => {\n                res.sort((a, b) => {\n                    return a.data === b.data ? 0 : (a.data > b.data ? 1 : -1);\n                })\n                setNationalData(res);\n            })\n        fetch('https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni.json')\n            .then(res => res.json())\n            .then((res : RegionalData[]) => {\n                res.sort((a, b) => {\n                    return a.data === b.data ? 0 : (a.data > b.data ? 1 : -1);\n                })\n                setRegionalData(res);\n            })\n    }\n\n    useEffect(() => {\n        updateData();\n        setInterval(() => {\n            updateData();\n        }, 60 * 60 * 1000);\n    }, [updateData]);\n\n    useEffect((): void => {\n        if (!nationalData || nationalData.length < 2 || !regionalData) {\n            return;\n        }\n        if (selectedRegion === '') {\n            const data = [...nationalData];\n            const todayData = data.pop();\n            const yesterdayData = data.pop();\n            setInfoBoxData({\n                label: 'Italia',\n                newCases: todayData!.nuovi_positivi,\n                recovered: todayData!.dimessi_guariti - yesterdayData!.dimessi_guariti,\n                deaths: todayData!.deceduti - yesterdayData!.deceduti,\n                day: new Date(Date.parse(todayData!.data)).toLocaleDateString('it-IT',  { year: 'numeric', month: 'long', day: 'numeric' })\n            })\n        }\n        else {\n            const data = [...regionalData];\n            const selectedRegionData = data.filter((thisData) => {\n                return thisData.denominazione_regione === selectedRegion;\n            })\n            if (selectedRegionData.length >= 2) {\n                const todayData = selectedRegionData.pop();\n                const yesterdayData = selectedRegionData.pop();\n                setInfoBoxData({\n                    label: selectedRegion,\n                    newCases: todayData!.nuovi_positivi,\n                    recovered: todayData!.dimessi_guariti - yesterdayData!.dimessi_guariti,\n                    deaths: todayData!.deceduti - yesterdayData!.deceduti,\n                    day: new Date(Date.parse(todayData!.data)).toLocaleDateString('it-IT',  { year: 'numeric', month: 'long', day: 'numeric' })\n                })\n            }\n        }\n    }, [nationalData, regionalData, selectedRegion]);\n\n    return (\n        <div className=\"App\">\n            <ItalyMap regionColors={regionColors} setTooltipContent={selectRegion}/>\n            <ReactTooltip>{selectedRegion}</ReactTooltip>\n            <InfoBox {...infoBoxData} />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}