{"version":3,"sources":["components/ItalyMap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","rossa","arancione","gialla","bianca","error","Container","styled","div","StyledMap","ComposableMap","ItalyMap","props","regionColors","setTooltipContent","data-tip","projection","projectionConfig","rotate","scale","geography","geojson","geographies","map","geo","regionInfo","find","region","name","properties","reg_name","color","fill","stroke","strokeWidth","onClick","console","log","onMouseEnter","onMouseLeave","style","default","outline","hover","cursor","opacity","pressed","rsmKey","App","useState","tooltip","setTooltip","setRegionColors","useEffect","updateRegionColors","setInterval","fetch","then","res","json","newRegionColors","forEach","push","Object","entries","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"k/y2FAKMA,EAAS,CAAEC,MAAO,UAAWC,UAAW,UAAWC,OAAQ,UAAWC,OAAQ,UAAWC,MAAO,WAqEhGC,EAAYC,IAAOC,IAAV,iEAKTC,EAAYF,YAAOG,gBAAPH,CAAH,iEAKAI,EAxEE,SAACC,GAAkB,IACxBC,EAAoCD,EAApCC,aAAcC,EAAsBF,EAAtBE,kBACtB,OACI,cAACR,EAAD,CAAWS,WAAS,GAApB,SACI,cAACN,EAAD,CACIO,WAAW,wBACXC,iBAAkB,CACdC,OAAQ,EAAE,IAAO,KAAM,GACvBC,MAAO,MAJf,SAQI,cAAC,cAAD,CAAaC,UAAWC,EAAxB,SAEQ,qBAAGC,YAA8BC,KAAI,SAACC,GAClC,IAAMC,EAAaZ,EAAaa,MAAK,SAACC,GAClC,OAAOA,EAAOC,OAASJ,EAAIK,WAAWC,YAEpCC,EAAQN,EAAaA,EAAU,MAAY,QACjD,OACI,cAAC,YAAD,CAEIL,UAAWI,EACXQ,KAAMhC,EAAO+B,GACbE,OAAQ,UACRC,YAAa,GACbC,QAAW,WAAO,IACNL,EAAaN,EAAIK,WAAjBC,SACRM,QAAQC,IAAI,wBAA0BP,IAE1CQ,aAAc,WAAO,IACTR,EAAaN,EAAIK,WAAjBC,SACRhB,EAAkBgB,IAEtBS,aAAc,WACVzB,EAAkB,KAEtB0B,MAAO,CACHC,QAAS,CACLC,QAAS,QAEbC,MAAO,CACHC,OAAQ,UACRF,QAAS,OACTG,QAAS,IAEbC,QAAS,CACLF,OAAQ,UACRF,QAAS,OACTG,QAAS,OA5BZrB,EAAIuB,mB,QCW9BC,G,MAtCH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACPC,EADO,KACEC,EADF,OAE0BF,mBAAmB,IAF7C,mBAEPpC,EAFO,KAEOuC,EAFP,KAIdC,qBAAU,WACNC,IACAC,aAAY,WACRD,MACD,QACJ,IAEH,IAAMA,EAAqB,WAEvBE,MAAM,uDACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAEF,IADA,IAAME,EAA8B,GAD3B,uCAEG7B,EAFH,UAIO8B,SAAQ,SAAClC,GACjBiC,EAAgBE,KAAK,CACjBlC,KAAMD,EACNI,MAAOA,QALnB,MAA+BgC,OAAOC,QAAQN,GAA9C,eAAqD,IASrDN,EAAgBQ,OAI5B,OACI,sBAAKK,UAAU,MAAf,UACI,cAAC,EAAD,CAAUpD,aAAcA,EAAcC,kBAAmBqC,IACzD,cAAC,IAAD,UAAeD,SCzBZgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e34e09d4.chunk.js","sourcesContent":["import { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport styled from 'styled-components';\nimport { Region } from '../types';\nimport geojson from '../geojson/regions_italy.json';\n\nconst colors = { rossa: '#dd222a', arancione: '#e78314', gialla: '#f8c300', bianca: '#f7f7f7', error: '#000000' }\n\ninterface Props {\n    regionColors: Region[],\n    setTooltipContent: (content: string) => void\n}\n\nconst ItalyMap = (props: Props) => {\n    const { regionColors, setTooltipContent } = props;\n    return (\n        <Container data-tip=''>\n            <StyledMap\n                projection='geoAzimuthalEqualArea'\n                projectionConfig={{\n                    rotate: [-12.0, -41.9, 0],\n                    scale: 3250\n                }}\n            >\n            {/* geojson source: https://github.com/openpolis/geojson-italy */}\n                <Geographies geography={geojson}>\n                    {\n                        ({ geographies }) => geographies.map((geo) => {\n                            const regionInfo = regionColors.find((region: Region) => {\n                                return region.name === geo.properties.reg_name;\n                            });\n                            const color = regionInfo ? regionInfo['color'] : 'error';\n                            return (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    fill={colors[color]}\n                                    stroke={'#555555'}\n                                    strokeWidth={0.5}\n                                    onClick = {() => {\n                                        const { reg_name } = geo.properties;\n                                        console.log('todo; you clicked on ' + reg_name);\n                                    }}\n                                    onMouseEnter={() => {\n                                        const { reg_name } = geo.properties;\n                                        setTooltipContent(reg_name);\n                                    }}\n                                    onMouseLeave={() => {\n                                        setTooltipContent('');\n                                    }}\n                                    style={{\n                                        default: {\n                                            outline: 'none'\n                                        },\n                                        hover: {\n                                            cursor: 'pointer',\n                                            outline: 'none',\n                                            opacity: 0.90\n                                        },\n                                        pressed: {\n                                            cursor: 'pointer',\n                                            outline: 'none',\n                                            opacity: 0.85\n                                        }\n                                    }}\n                                />\n                            );\n                        })\n                    }\n                </Geographies>\n            </StyledMap>\n        </Container>\n    );\n}\n\nconst Container = styled.div`\n    height: 100%;\n    width: 100%;\n`\n\nconst StyledMap = styled(ComposableMap)`\n    height: 100%;\n    width: 100%;\n`\n\nexport default ItalyMap;\n","import { useState, useEffect } from 'react';\nimport ItalyMap from './components/ItalyMap';\nimport ReactTooltip from 'react-tooltip';\nimport './App.css';\nimport { Region } from './types';\n\nconst App = () => {\n    const [tooltip, setTooltip] = useState('');\n    const [regionColors, setRegionColors] = useState<Region[]>([]);\n\n    useEffect(() => {\n        updateRegionColors();\n        setInterval(() => {\n            updateRegionColors();\n        }, 60 * 60 * 1000)\n    }, []);\n\n    const updateRegionColors = () => {\n        // data source: https://www.salute.gov.it/portale/nuovocoronavirus/homeNuovoCoronavirus.jsp\n        fetch('https://cristianlivella.com/covid19-colori-regioni/')\n            .then(res => res.json())\n            .then(res => {\n                const newRegionColors : Region[]  = [];\n                for (const [color, regions] of Object.entries(res)) {\n                    const regionsList = regions as string[]\n                    regionsList.forEach((region) => {\n                        newRegionColors.push({\n                            name: region,\n                            color: color as Region['color']\n                        })\n                    })\n                }\n                setRegionColors(newRegionColors);\n            })\n    }\n\n    return (\n        <div className=\"App\">\n            <ItalyMap regionColors={regionColors} setTooltipContent={setTooltip}/>\n            <ReactTooltip>{tooltip}</ReactTooltip>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}